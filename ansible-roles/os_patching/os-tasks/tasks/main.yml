---
    - name: Check the OS
      ansible.builtin.setup:
      register: os_info

    - name: Remove disabled snaps (only for systems supporting snaps)
      ansible.builtin.shell: "snap list --all"
      register: snap_list_output
      when: ansible_distribution == "Ubuntu"
      changed_when: false

    - name: Process snap list output and remove disabled snaps
      ansible.builtin.shell: "snap remove {{ item.split()[0] }} --revision={{ item.split()[1] }}"
      with_items: "{{ snap_list_output.stdout_lines }}"
      when: "'disabled' in item and ansible_distribution == 'Ubuntu'"
      changed_when: true

    - name: Vacuum journalctl logs to limit size to 20M
      ansible.builtin.shell: "journalctl --vacuum-size=20M"
      changed_when: true

    - name: Fix broken packages for Debian-based systems
      ansible.builtin.shell: "DEBIAN_FRONTEND=noninteractive dpkg --configure -a"
      when: ansible_os_family == "Debian"
      changed_when: true

    - name: Perform apt update for Debian-based systems
      ansible.builtin.shell: "apt update"
      when: ansible_os_family == "Debian"
      changed_when: true

    - name: Perform yum update for Red Hat-based systems
      ansible.builtin.shell: "yum -y update"
      when: ansible_os_family == "RedHat"
      changed_when: true

    - name: Perform dnf update for newer Red Hat-based systems
      ansible.builtin.shell: "dnf -y update"
      when: ansible_os_family == "RedHat" and ansible_distribution_major_version | int >= 8
      changed_when: true

    - name: Hold specified packages (Debian-based systems)
      ansible.builtin.shell: "apt-mark hold {{ item }}"
      with_items: "{{ EXCLUDE_PKGS.split(';') }}"
      when: ansible_os_family == "Debian" and EXCLUDE_PKGS is defined and EXCLUDE_PKGS | length > 0
      ignore_errors: true
      changed_when: true

    - name: Check kernel version before patching
      ansible.builtin.command: "uname -r"
      register: kernel_version_before
      changed_when: false

    - name: Get the latest installed kernel version from dpkg.log (Debian-based systems)
      ansible.builtin.shell: |
        grep 'install linux-image' /var/log/dpkg.log | tail -n 1 | awk '{print $4}' | cut -d ":" -f1 | cut -d "-" -f3-
      register: latest_kernel_install
      when: ansible_os_family == "Debian"
      changed_when: false

    - name: Get the latest installed kernel version from RPM logs (Red Hat-based systems)
      ansible.builtin.shell: |
        rpm -q --last kernel | head -n 1 | awk '{print $1}'
