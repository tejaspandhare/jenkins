---
# Remove disabled snaps on Ubuntu servers
- name: Remove disabled snaps on Ubuntu servers
  ansible.builtin.shell: "snap list --all"
  register: snap_list_output
  changed_when: false
  when: ansible_distribution == 'Ubuntu'

- name: Process snap list output and remove disabled snaps on Ubuntu servers
  ansible.builtin.shell: "snap remove {{ item.0 }} --revision={{ item.1 }}"
  with_items: "{{ snap_list_output.stdout_lines }}"
  when: ansible_distribution == 'Ubuntu' and 'disabled' in item
  changed_when: false

# Vacuum journalctl logs to limit size to 20M
- name: Vacuum journalctl logs to limit size to 20M
  ansible.builtin.shell: "journalctl --vacuum-size=20M"
  changed_when: false

# Fix broken packages on Debian-based systems
- name: Fix broken packages on Debian-based systems
  ansible.builtin.shell: "DEBIAN_FRONTEND=noninteractive dpkg --configure -a"
  changed_when: false
  when: ansible_os_family == 'Debian'

# Perform apt update on Debian-based systems
- name: Perform apt update to check for updates on Debian-based systems
  ansible.builtin.shell: "apt update"
  changed_when: false
  when: ansible_os_family == 'Debian'

# Hold specified packages on Debian-based systems
- name: Hold specified packages on Debian-based systems
  ansible.builtin.shell: "apt-mark hold {{ item }}"
  with_items: "{{ exclude_packages_list }}"
  when: ansible_os_family == 'Debian' and exclude_packages_list | length > 0
  ignore_errors: true
  changed_when: false

# Perform OS patch update on Debian-based systems
- name: Perform OS patch update on Debian-based systems
  ansible.builtin.shell: "DEBIAN_FRONTEND=noninteractive apt dist-upgrade -y"
  register: apt_upgrade_simulate
  changed_when: false
  when: ansible_os_family == 'Debian'

# Get the current kernel version
- name: Get the current kernel version
  ansible.builtin.command: "uname -r"
  register: kernel_version_before
  changed_when: false

# Perform OS patch update on Red Hat, CentOS, and SUSE systems
- name: Perform OS patch update on Red Hat, CentOS, and SUSE systems
  ansible.builtin.shell: "yum update -y"
  register: yum_update
  changed_when: yum_update.stdout | regex_search('Updated') | length > 0
  when: ansible_os_family in ['RedHat', 'CentOS', 'Suse']

# Get the latest installed kernel version from dpkg.log (Debian-based)
- name: Get the latest installed kernel version from dpkg.log (Debian-based)
  ansible.builtin.shell: |
    grep 'install linux-image' /var/log/dpkg.log | tail -n 1 | awk '{print $4}' | cut -d ":" -f1 | cut -d "-" -f3-
  register: latest_kernel_install
  changed_when: false
  when: ansible_os_family == 'Debian'

# Check if a new kernel was installed (Debian-based)
- name: Check if a new kernel was installed (Debian-based)
  ansible.builtin.set_fact:
    reboot_required: "{{ latest_kernel_install.stdout.strip() != kernel_version_before.stdout.strip() }}"
  when: ansible_os_family == 'Debian'

# Get the latest installed kernel version from RPM database (RedHat/CentOS/SUSE)
- name: Get the latest installed kernel version from rpm database (RedHat/CentOS/SUSE)
  ansible.builtin.shell: |
    rpm -q --queryformat '%{VERSION}-%{RELEASE}\n' kernel | sort -V | tail -n 1
  register: latest_kernel_install
  changed_when: false
  when: ansible_os_family in ['RedHat', 'CentOS', 'Suse']

# Check if a new kernel was installed (RedHat/CentOS/SUSE)
- name: Check if a new kernel was installed (RedHat/CentOS/SUSE)
  ansible.builtin.set_fact:
    reboot_required: "{{ latest_kernel_install.stdout.strip() != kernel_version_before.stdout.strip() }}"
  when: ansible_os_family in ['RedHat', 'CentOS', 'Suse']

# Debug information about kernel versions
- name: Debug information about kernel versions
  ansible.builtin.debug:
    msg:
      - "Current kernel version: {{ kernel_version_before.stdout.strip() }}"
      - "New kernel version detected: {{ latest_kernel_install.stdout.strip() if latest_kernel_install.stdout is defined else 'N/A' }}"
      - "Reboot required: {{ reboot_required | default(false) }}"

# Reboot if a new kernel is installed
- name: Reboot if a new kernel is installed
  ansible.builtin.reboot:
  when: reboot_required | default(false)
  ignore_errors: true
  changed_when: true


