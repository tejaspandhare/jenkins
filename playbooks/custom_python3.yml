---
- name: Compile and install Python from source with version support
  hosts: "{{ hosts.split(';') }}"
  become: true
  gather_facts: true

  vars:
    python_version: "3.11.9"  # ðŸ‘ˆ Change this to any version you want
    python_major_minor: "{{ python_version.split('.')[0] }}.{{ python_version.split('.')[1] }}"
    python_src_dir: "/usr/src"
    python_tarball: "Python-{{ python_version }}.tgz"
    python_url: "https://www.python.org/ftp/python/{{ python_version }}/{{ python_tarball }}"
    python_prefix: "/usr/local"
    python_bin_path: "{{ python_prefix }}/bin/python{{ python_major_minor }}"
    pip_bin_path: "{{ python_prefix }}/bin/pip{{ python_major_minor }}"

  tasks:
    - name: Install dependencies on Debian/Ubuntu
      apt:
        name:
          - build-essential
          - zlib1g-dev
          - libssl-dev
          - wget
          - curl
          - libbz2-dev
          - libreadline-dev
          - libsqlite3-dev
          - libffi-dev
          - xz-utils
          - tk-dev
        state: present
      when: ansible_os_family == "Debian"

    - name: Install dependencies on RHEL/CentOS
      yum:
        name:
          - gcc
          - openssl-devel
          - bzip2-devel
          - libffi-devel
          - zlib-devel
          - make
          - readline-devel
          - sqlite-devel
          - xz-devel
          - tk-devel
          - wget
          - curl
        state: present
      when: ansible_os_family == "RedHat"

    - name: Check if Python {{ python_version }} is already installed
      stat:
        path: "{{ python_bin_path }}"
      register: python_check

    - name: Check if pip for Python {{ python_major_minor }} is already installed
      stat:
        path: "{{ pip_bin_path }}"
      register: pip_check

    - name: Show message if Python is already installed
      debug:
        msg: "Python {{ python_version }} is already installed at {{ python_bin_path }}."
      when: python_check.stat.exists

    - name: Show message if pip is already installed
      debug:
        msg: "pip{{ python_major_minor }} is already installed at {{ pip_bin_path }}."
      when: pip_check.stat.exists

    - name: Create source directory
      file:
        path: "{{ python_src_dir }}"
        state: directory
        mode: '0755'
      when: not python_check.stat.exists

    - name: Download Python {{ python_version }} source
      get_url:
        url: "{{ python_url }}"
        dest: "{{ python_src_dir }}/{{ python_tarball }}"
        mode: '0644'
      when: not python_check.stat.exists

    - name: Extract Python tarball
      unarchive:
        src: "{{ python_src_dir }}/{{ python_tarball }}"
        dest: "{{ python_src_dir }}"
        remote_src: yes
      when: not python_check.stat.exists

    - name: Compile and install Python {{ python_version }}
      shell: |
        cd {{ python_src_dir }}/Python-{{ python_version }}
        ./configure --prefix={{ python_prefix }}
        make -j"$(nproc)"
        make altinstall
      args:
        creates: "{{ python_bin_path }}"
      when: not python_check.stat.exists

    - name: Install pip for Python {{ python_major_minor }}
      shell: |
        curl -sS https://bootstrap.pypa.io/pip/{{ python_major_minor }}/get-pip.py -o /tmp/get-pip.py
        {{ python_bin_path }} /tmp/get-pip.py
      args:
        creates: "{{ pip_bin_path }}"
      when: not pip_check.stat.exists

    - name: Create symlink /usr/bin/python{{ python_major_minor }}
      file:
        src: "{{ python_bin_path }}"
        dest: "/usr/bin/python{{ python_major_minor }}"
        state: link
        force: yes
      when: not python_check.stat.exists

    - name: Create symlink /usr/bin/pip{{ python_major_minor }}
      file:
        src: "{{ pip_bin_path }}"
        dest: "/usr/bin/pip{{ python_major_minor }}"
        state: link
        force: yes
      when: not pip_check.stat.exists

    - name: Check installed Python version
      command: "/usr/bin/python{{ python_major_minor }} --version"
      register: python_version_output

    - name: Check installed pip version
      command: "/usr/bin/pip{{ python_major_minor }} --version"
      register: pip_version_output

    - name: List pip modules
      command: "/usr/bin/pip{{ python_major_minor }} list"
      register: pip_modules_output

    - name: Show installed Python version
      debug:
        msg: "Python {{ python_major_minor }} installed: {{ python_version_output.stdout }}"

    - name: Show installed pip version
      debug:
        msg: "pip{{ python_major_minor }} installed: {{ pip_version_output.stdout }}"

    - name: Show pip{{ python_major_minor }} modules
      debug:
        msg: "pip{{ python_major_minor }} modules: {{ pip_modules_output.stdout }}"
