---
- name: Perform Maintenance Tasks
  hosts: "{{ hosts.split(';') }}"
  gather_facts: true

  vars:
    all_systems_info: []  # Initialize to avoid undefined variable issues

  tasks:
    - name: Ensure playbook directory exists
      file:
        path: "{{ playbook_dir }}"
        state: directory

    - name: Gather system information
      block:
        - name: Get distribution name
          command: cat /etc/os-release
          register: distro_info
          failed_when: false

        - name: Get CPU information
          command: lscpu
          register: cpu_info
          failed_when: false

        - name: Get RAM information
          command: free -h
          register: ram_info
          failed_when: false

        - name: Get kernel version
          command: uname -r
          register: kernel_version
          failed_when: false

        - name: Get hardware type
          command: dmidecode -s system-product-name
          register: hardware_type
          failed_when: false
          ignore_errors: true

        - name: Log errors for failed commands
          debug:
            msg: "Error retrieving information for {{ inventory_hostname }}: {{ item }}"
          loop:
            - "{{ distro_info.stderr }}"
            - "{{ cpu_info.stderr }}"
            - "{{ ram_info.stderr }}"
            - "{{ kernel_version.stderr }}"
            - "{{ hardware_type.stderr }}"
          when: item is not none

        - name: Aggregate information
          set_fact:
            system_info:
              hostname: "{{ inventory_hostname }}"
              distribution: "{{ distro_info.stdout | default('N/A') }}"
              cpu: "{{ cpu_info.stdout | default('N/A') }}"
              ram: "{{ ram_info.stdout | default('N/A') }}"
              kernel: "{{ kernel_version.stdout | default('N/A') }}"
              hardware: "{{ hardware_type.stdout | default('N/A') }}"

        - name: Collect all system information for display
          set_fact:
            all_systems_info: "{{ all_systems_info + [system_info] }}"

    - name: Write report to CSV file in the Jenkins workspace
      copy:
        dest: "{{ playbook_dir }}/../system_report.csv"  # Adjust path as necessary
        content: |
          hostname,distribution,cpu,ram,kernel,hardware
          {% for system in all_systems_info %}
          "{{ system.hostname }}","{{ system.distribution | replace(',', ' ') }}","{{ system.cpu | replace(',', ' ') }}","{{ system.ram | replace(',', ' ') }}","{{ system.kernel }}","{{ system.hardware | replace(',', ' ') }}"
          {% endfor %}
