---
- name: Perform Maintenance Tasks
  hosts: "{{ hosts.split(';') }}"  # Split SERVER_NAME into a list
  gather_facts: true  # Ensure facts are gathered to check OS version

  tasks:
    - name: Remove disabled snaps
      ansible.builtin.shell:
        cmd: "snap list --all"
      register: snap_list_output
      changed_when: false

    - name: Process snap list output and remove disabled snaps
      ansible.builtin.shell:
        cmd: "snap remove {{ item.0 }} --revision={{ item.1 }}"
      with_items: "{{ snap_list_output.stdout_lines }}"
      when: "'disabled' in item"
      changed_when: false

    - name: Vacuum journalctl logs to limit size to 20M
      ansible.builtin.shell:
        cmd: "journalctl --vacuum-size=20M"
      changed_when: false

    - name: Perform apt update to check for updates
      ansible.builtin.shell:
        cmd: "apt update"
      changed_when: false

    - name: Check kernel version before patching
      ansible.builtin.command:
        cmd: "uname -r"
      register: kernel_version_before
      changed_when: false

    - name: Prompt for service restart confirmation before dist-upgrade
      ansible.builtin.pause:
        prompt: "Some services may need to be restarted due to package upgrades. Proceed with service restarts? (yes/no)"
      register: service_restart_confirm
      when: ansible_distribution == 'Ubuntu'  # Adjust this condition based on your OS distribution

    - name: Update OS patches (apt dist-upgrade)
      ansible.builtin.shell:
        cmd: "apt-get dist-upgrade -y"
      register: apt_upgrade_result
      changed_when: "'0 upgraded, 0 newly installed' not in apt_upgrade_result.stdout"
      when: service_restart_confirm.user_input | lower == 'yes'

    - name: Check kernel version after patching
      ansible.builtin.command:
        cmd: "uname -r"
      register: kernel_version_after
      changed_when: false

    - name: Restart services if packages were upgraded and confirmed
      ansible.builtin.service:
        name: "{{ item }}"
        state: restarted
      loop: "{{ apt_upgrade_result.packages }}"
      when: apt_upgrade_result.changed and service_restart_confirm.user_input | lower == 'yes'

    - name: Reboot if kernel version has changed
      ansible.builtin.reboot:
      when: kernel_version_before.stdout != kernel_version_after.stdout
      async: 0
      poll: 0
      ignore_errors: true
      changed_when: true

    - name: Display OS version changes
      ansible.builtin.debug:
        msg: |
          OS version changes:
            - Before patching: {{ kernel_version_before.stdout }}
            - After patching : {{ kernel_version_after.stdout }}
