---
- name: Perform Maintenance Tasks
  hosts: "{{ hosts.split(';') }}"  # Split SERVER_NAME into a list
  gather_facts: true  # Ensure facts are gathered to check OS version

  vars:
    EXCLUDE_PKGS: "{{ lookup('env', 'EXCLUDE_PKGS') }}"  # Retrieve EXCLUDE_PKGS from environment
    exclude_packages_list: "{{ EXCLUDE_PKGS.split(';') | map('trim') | select('string') | list }}"

  tasks:
    - name: Remove disabled snaps
      ansible.builtin.shell:
        cmd: "snap list --all"
      register: snap_list_output
      changed_when: false

    - name: Process snap list output and remove disabled snaps
      ansible.builtin.shell:
        cmd: "snap remove {{ item.0 }} --revision={{ item.1 }}"
      with_items: "{{ snap_list_output.stdout_lines }}"
      when: "'disabled' in item"
      changed_when: false

    - name: Vacuum journalctl logs to limit size to 20M
      ansible.builtin.shell:
        cmd: "journalctl --vacuum-size=20M"
      changed_when: false

    - name: Fix Broken packages
      ansible.builtin.shell:
        cmd: "DEBIAN_FRONTEND=noninteractive dpkg --configure -a"
      changed_when: false
      
    - name: Perform apt update to check for updates
      ansible.builtin.shell:
        cmd: "apt update"
      changed_when: false

    - name: Check kernel version before patching
      ansible.builtin.command:
        cmd: "uname -r"
      register: kernel_version_before
      changed_when: false

    - name: Hold specified packages
      ansible.builtin.shell:
        cmd: "apt-mark hold {{ item }}"
      with_items: "{{ EXCLUDE_PKGS.split(';') }}"
      when: EXCLUDE_PKGS is defined and EXCLUDE_PKGS | length > 0
      ignore_errors: true
      changed_when: false

    - name: Perform OS patch update
      ansible.builtin.shell:
        cmd: "DEBIAN_FRONTEND=noninteractive apt dist-upgrade -y"
      register: apt_upgrade_simulate
      changed_when: false

    - name: Get current kernel version
      command: uname -r
      register: kernel_version_before

    - name: Get the last installed kernel version from dpkg.log
      shell: |
        grep 'install linux-image' /var/log/dpkg.log | tail -n 1
      register: last_kernel_install
      changed_when: false

    - name: Debug dpkg.log entry
      debug:
        msg: "Raw dpkg.log entry: {{ last_kernel_install.stdout }}"

    - name: Extract the newly installed kernel version
      set_fact:
        new_kernel_version: >-
          {{
            last_kernel_install.stdout | regex_search('linux-image-([0-9.]+-[a-zA-Z0-9.-]+)', '\\1') | default('')
          }}

    - name: Debug extracted kernel version
      debug:
        msg: "Extracted kernel version: {{ new_kernel_version }}"

    - name: Check if a new kernel was installed
      set_fact:
        reboot_required: "{{ new_kernel_version and kernel_version_before.stdout != new_kernel_version }}"

    - name: Debug information about kernel versions
      debug:
        msg:
          - "Current kernel version: {{ kernel_version_before.stdout }}"
          - "New kernel version detected: {{ new_kernel_version }}"
          - "Reboot required: {{ reboot_required }}"

    - name: Reboot if a new kernel is installed
      ansible.builtin.reboot:
      when: reboot_required
      ignore_errors: true
      changed_when: true

